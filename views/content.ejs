<!DOCTYPE html>
<html lang="en">
<head>
    <title></title>
    <script type="text/javascript" src="https://miro.com/app/static/sdk.1.1.js"></script>
    <style>
      html, body {
          height: 100%;
          margin: 0;
          padding: 0;
      }
  
      #container {
          height: 100%;
          overflow-y: auto;
          overflow-x: hidden;
          display: flex;
          flex-wrap: wrap;
          flex-direction: row;
          align-items: center;
          padding-top: 32px;
          box-sizing: border-box;
      }
  
      .row {
          display: flex;
          flex-direction: row;
          padding-left: 32px;
          margin-bottom: 32px;
      }
  
      .draggable-item {
          margin-left: 32px;
          margin-bottom: 32px;
          width: 112px;
          height: 112px;
          display: flex;
          justify-content: center;
          align-items: center;
          color: #fff;
          font-size: 18px;
          font-family: sans-serif;
      }
  
      .draggable-item.red {
          background-color: #f24726;
      }
  
      .draggable-item.green {
          background-color: #0ca788;
      }
  
      .image-box img {
          max-width: 112px;
          max-height: 112px;
          cursor: pointer;
      }
  
  </style>
</head>
<body>
<div id="container">
  
</div>
<script>

	const images = [
    <% for(var i = 0 ; i < arr.length ; i++) { %>{ src: '<%= arr[i].src %>', width: <%= arr[i].width %>, height: <%= arr[i].height %>, type:'<%= arr[i].type %>'},
    <% } %>
	]

	function getImage(img) {
		return `<div class="draggable-item image-box">
		        <img src="${img.src}" data-image-url="https://miro-icons.tiltshiftapps.nl/${img.src}">
		        </div>`
	}

	function addShapes(container) {
		container.innerHTML += '<div class="shape draggable-item green" data-color="0ca788">Test Shape</div>' +
			'<div class="shape draggable-item red" data-color="f24726">Another Shape</div>'
	}

	function addImages(container) {
		container.innerHTML += images.map(i => getImage(i)).join('')
	}

	function createImage(canvasX, canvasY, url) {
		console.log(url)
		return miro.board.widgets.create({
			type: 'image',
			url: url,
			x: canvasX,
			y: canvasY,
		})
	}

	function createShape(canvasX, canvasY, color, text) {
		return miro.board.widgets.create({
			type: 'shape',
			text: text,
			x: canvasX,
			y: canvasY,
			style: {
				textColor: '#fff',
				backgroundColor: '#' + color,
				borderColor: 'transparent'
			}
		})
	}

	function bootstrap() {
		const container = document.getElementById('container')
		addShapes(container)
		addImages(container)

        let currentImageUrl
		const imageOptions = {
			draggableItemSelector: 'img',
			onClick: async (targetElement) => {
				const url = targetElement.getAttribute('data-image-url')
				const widget = (await createImage(0, 0, url))[0]
				miro.board.viewport.zoomToObject(widget)

			},
			getDraggableItemPreview: (targetElement) => { //drag-started
				currentImageUrl = targetElement.getAttribute('data-image-url')
				return {
					width: 100,
					height: 100,
					url: currentImageUrl
				}
			},
			onDrop: (canvasX, canvasY) => {
				console.log('onDrop 1')
				createImage(canvasX, canvasY, currentImageUrl)
			}
		}
		miro.board.ui.initDraggableItemsContainer(container, imageOptions)

		let currentShapeColor
		let currentShapeText
		const shapeOptions = {
			draggableItemSelector: '.shape',
			onClick: async (targetElement) => {
				const color = targetElement.getAttribute('data-color')
				const text = targetElement.innerText
				const widget = (await createShape(0, 0, color, text))[0]
				miro.board.viewport.zoomToObject(widget)

			},
			getDraggableItemPreview: (targetElement) => {
				currentShapeColor = targetElement.getAttribute('data-color')
				currentShapeText = targetElement.innerText
				return {
					url: `data:image/svg+xml,%3Csvg width='140' height='140' xmlns='http://www.w3.org/2000/svg'%3E%3Cg%3E%3Crect stroke='null' x='0' y='0' fill='%23${currentShapeColor}' height='140' width='140'/%3E%3C/g%3E%3C/svg%3E`
				}
			},
			onDrop: (canvasX, canvasY) => {
				console.log('onDrop 2')
				createShape(canvasX, canvasY, currentShapeColor, currentShapeText)
			}
		}
		miro.board.ui.initDraggableItemsContainer(container, shapeOptions)
	}

	miro.onReady(bootstrap)
</script>
</body>
</html>
